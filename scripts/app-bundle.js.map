{"version":3,"sources":["src/app.js","src/environment.js","src/main.js","src/shared/index.js","src/resources/index.js","src/components/auth/authcomponent.js","src/components/home/homecomponent.js","src/components/report/reportcomponent.js","src/components/updatebalance/updatebalancecomponent.js","src/shared/layouts/footerlayout.js","src/shared/layouts/headerlayout.js","src/shared/models/user.js","src/shared/services/accountservice.js","src/shared/services/apiservice.js","src/shared/services/articleservice.js","src/shared/services/config.js","src/shared/services/jwtservice.js","src/shared/services/reportservice.js","src/shared/services/servicehelper.js","src/shared/services/transactionservice.js","src/shared/services/userservice.js","src/shared/state/sharedstate.js","src/resources/elements/accountlist.js","src/resources/elements/accountpreview.js","src/resources/value-converters/date.js","src/resources/value-converters/formathtml.js","src/resources/value-converters/keys.js"],"names":["App","userService","configureRouter","config","router","title","map","route","moduleId","name","mapUnknownRoutes","attached","debug","testing","configure","aurelia","use","standardConfiguration","feature","plugin","developmentLogging","start","then","setRoot","globalResources","AuthComponent","transactionService","sharedState","controllerFactory","type","username","email","password","errors","errorMsg","roles","controller","createForCurrentScope","ensure","required","minLength","when","auth","on","determineActivationStrategy","replace","activate","params","routeConfig","id","submit","successMsg","credentials","grant_type","attemptAuth","response","failLogin","Email","Password","ConfirmPassword","confirmPassword","role","Role","selectedRoleId","register","addRole","successRegister","failRegister","AccountComponent","bindingEngine","accountService","accounts","year","month","currentUser","getBalance","monthString","format","fail","ReportComponent","reportService","reportdata","labels","lineOptions","display","text","tooltips","mode","intersect","hover","scales","xAxes","gridLines","scaleLabel","labelString","yAxes","ticks","beginAtZero","getReport","isInitialLoading","lineData","datasets","label","data","backgroundColor","borderColor","borderWidth","fill","ctx","chart","myChart","options","success","UpdateBalance","transactions","months","excelData","getAllAccounts","getAll","accountList","getAllBtn","forEach","element","failLoading","addTransaction","parseInt","newAmount","transaction","Month","Year","Amount","AccountId","selectedAccountId","save","deleteTransaction","transactionId","destroy","upload","files","disp","document","getElementById","convertTextToArray","innerText","RandD","Canteen","CEOCar","Marketing","ParkingFines","postDate","saveExcelBalanceData","fileLocation","getAsText","window","FileReader","reader","onload","e","result","readAsText","alert","allTextLines","split","lines","i","length","tarr","j","push","FooterLayout","HeaderLayout","defaultBindingMode","twoWay","jwtService","activeRoute","routerConfigChanged","newValue","oldValue","logout","purgeAuth","navigateToRoute","User","token","bio","image","AccountService","apiService","get","qs","ApiService","http","setHeaders","headersConfig","getToken","Headers","path","method","headers","fetch","api_url","stringify","catch","put","body","post","postForLogin","contentType","json","err","delete","ArticleService","getList","slug","article","favorite","unfavorite","JwtService","localStorage","saveToken","destroyToken","removeItem","ReportService","status","parseError","error","Error","Promise","resolve","reject","TransactionService","UserService","populate","setAuth","user","access_token","isAuthenticated","getUserInfo","info","location","assign","SharedState","AccountList","AccountPreview","DateValueConverter","toView","value","FormatHtmlValueConverter","KeysValueConverter","Reflect","ownKeys"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\nimport {UserService} from './shared/services/userservice';\n\n@inject(UserService)\nexport class App {\n  \n  constructor(userService) {\n    this.userService = userService;\n  }\n  \n  configureRouter(config, router) {\n    config.title = 'Account Balance Viewer';\n    config.map([\n      {route: ['', 'home'], moduleId: 'components/home/homecomponent', name:'home', title: 'home'},\n      {route: ['login'], moduleId: 'components/auth/authcomponent', name: 'login', title: 'Sign in'},\n      {route: ['register'], moduleId: 'components/auth/authcomponent', name:'register', title: 'Register'},\n      {route: ['updatebalance'], moduleId: 'components/updatebalance/updatebalancecomponent', name:'updatebalance', title: 'updatebalance'},\n      {route: ['reports'], moduleId: 'components/report/reportcomponent', name:'reports', title: 'reports'}\n    ]);\n\n    config.mapUnknownRoutes('components/home/homecomponent');\n    \n    this.router = router;\n  }\n  \n  attached() {\n    \n  }\n}\n","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import environment from './environment';\r\n\r\nexport function configure(aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources')\r\n    .feature('shared')\r\n    .plugin('aurelia-validation');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","export function configure(config) {\r\n  //config.globalResources([]);\r\n}\r\n","export function configure(config) {\r\n  config.globalResources(['./value-converters/date']);\r\n}\r\n","import {inject} from 'aurelia-dependency-injection';\nimport {Router, activationStrategy} from 'aurelia-router';\nimport {ValidationControllerFactory, ValidationRules} from 'aurelia-validation';\nimport {UserService} from '../../shared/services/userservice';\nimport {SharedState} from '../../shared/state/sharedstate';\nimport {TransactionService} from '../../shared/services/transactionservice';\n\n@inject(TransactionService, UserService, SharedState, Router, ValidationControllerFactory)\nexport class AuthComponent {\n  type = '';\n  username = '';\n  email = '';\n  password = '';\n  errors = null;\n  errorMsg = null;\n  roles = [];\n  \n  constructor(transactionService, userService, sharedState, router, controllerFactory) {\n    this.transactionService = transactionService;\n    this.userService = userService;\n    this.sharedState = sharedState;\n    this.router = router;\n    this.controller = controllerFactory.createForCurrentScope();\n    \n    ValidationRules\n      .ensure('email').required().email()\n      .ensure('password').required().minLength(6)\n      .ensure('confirmPassword').required().when((auth) => auth.type === 'register')\n      .on(this);\n  }\n  \n  determineActivationStrategy() {\n    return activationStrategy.replace;\n  }\n  \n  activate(params, routeConfig) {\n    this.type = routeConfig.name;\n    this.roles = [\n      {\n        name: \"ADMIN\",\n        id: 1\n      },\n      {\n        name: \"USER\",\n        id: 2\n      }\n    ]\n  }\n  \n  get canSave() {\n    if (this.type == 'login') {\n      return this.email !== '' && this.password !== '';\n    } else {\n      return this.email !== '' && this.password !== '' && this.confirmPassword === this.password;\n    }\n  }\n  \n  submit() {\n    this.errors = null;\n    this.errorMsg = null;\n    this.successMsg = null;\n    if (this.type == 'login') {\n      const credentials = {\n        username: this.email,\n        password: this.password,\n        grant_type:\"password\"\n      };\n      this.userService.attemptAuth(credentials)\n      .then(response => {\n        if(response=='User logged in successfully.') {\n          this.failLogin = null;\n        } else {\n          this.failLogin = 'Sorry, an error occured in during login.';\n        }\n      },err => {\n        this.failLogin = 'Sorry, an error occured in during login.';\n      });\n    } else {\n      const credentials = {\n        Email: this.email,\n        Password: this.password,\n        ConfirmPassword: this.confirmPassword,\n      };\n\n      const role = {\n        Email: this.email,\n        Role : this.selectedRoleId\n      }\n\n      this.userService.register(credentials)\n      .then(response => {\n        if(response == \"User registration was successful.\"){\n          return this.userService.addRole(role)\n          .then(response => {\n            if(response == \"User role was added successful.\"){\n              this.successRegister = \"The user was registered successfully\";\n              this.failRegister = null;\n            } else {\n              this.successRegister = null;\n              this.failRegister = \"An Error occued while registering the role to the user\";\n            }\n          },err => {\n            this.successRegister = null;\n            this.failRegister = \"An Error occued while registering the user\";\n          });\n\n        } else {\n          this.successRegister = null;\n          this.failRegister = \"An Error occued while registering the user\";\n        }\n      },err => {\n        this.successRegister = null;\n        this.failRegister = \"An Error occued while registering the user\";\n      });\n\n    }\n    \n  }\n}\n","import {BindingEngine} from 'aurelia-framework';\nimport {inject} from 'aurelia-dependency-injection';\nimport {SharedState} from '../../shared/state/sharedstate';\nimport {AccountService} from \"../../shared/services/accountservice\";\nimport moment from 'moment';\n\n@inject(SharedState, BindingEngine,AccountService)\nexport class AccountComponent {\n  accounts = [];\n  \n  constructor(sharedState, bindingEngine, accountService) {\n    this.sharedState = sharedState;\n    this.bindingEngine = bindingEngine;\n    this.accountService = accountService;\n    this.year = moment().year();\n    this.month = moment().month();\n  }\n\n  attached() {\n    if(this.sharedState.currentUser.role=='USER'){\n      this.getBalance(this.year, this.month);\n    }\n    \n  }\n  \n  getBalance(year, month) {\n    if(year && month) {\n      let params = {\n        year: year,\n        month: month\n      };\n  \n      this.accountService.getBalance(params)\n        .then(response => {\n          this.accounts = response;\n          this.monthString =  moment(month+1, 'MM').format('MMMM');\n        },err => {\n          this.fail = \"The account balance failed Loading.\";\n        })\n    }\n    \n  }\n\n}\n","import {BindingEngine} from 'aurelia-framework';\nimport {inject} from 'aurelia-dependency-injection';\nimport {SharedState} from '../../shared/state/sharedstate';\nimport {ReportService} from \"../../shared/services/reportservice\";\nimport {Chart} from 'node_modules/chart.js/dist/Chart.js';\nimport moment from 'moment';\nimport lodash from 'lodash';\n\n@inject(SharedState, BindingEngine,ReportService)\nexport class ReportComponent {\n  reportdata = null;\n  labels = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  ]\n\n  //accountNames = ['RandD', 'Canteen', 'CEOCar', 'Marketing', 'ParkingFines']\n\n  lineOptions = {\n    title:{\n      display:true,\n      text:`Monthly Account Balances of year ${this.year}`\n    },\n    tooltips: {\n      mode: 'index',\n      intersect: false,\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true\n    },\n    scales: {\n      xAxes: [{\n        gridLines: {\n          display: true,\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Month'\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          display: true,\n        },\n        ticks: {\n          beginAtZero: true\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Amount'\n        }\n      }],\n    },\n  };\n  \n  constructor(sharedState, bindingEngine, reportService) {\n    this.sharedState = sharedState;\n    this.bindingEngine = bindingEngine;\n    this.reportService = reportService;\n    this.year = moment().year();\n  }\n\n  attached() {\n    if(this.sharedState.currentUser.role=='ADMIN'){\n      this.getReport(true);\n    }\n    \n  }\n  \n  getReport(isInitialLoading) {\n    this.reportdata = null\n\n    let params = {\n      year: this.year\n    };\n\n\n    this.reportService.getReport(params)\n      .then(response => {\n        this.reportdata = response;\n\n        this.lineData = {\n          labels: this.labels,\n          datasets: [\n            {\n              label: 'R&D',\n              data: response['RandD'],\n              backgroundColor: 'rgba(255,0,0,1)',\n              borderColor: 'rgba(255,0,0,1)',\n              borderWidth: 1,\n              fill: false,\n            },\n            {\n              label: 'Canteen',\n              data: response['Canteen'],\n              backgroundColor: 'rgba(0, 255, 0, 0.2)',\n              borderColor: 'rgba(0, 255, 0, 1)',\n              borderWidth: 1,\n              fill: false,\n            },\n            {\n              label: 'CEO’s car',\n              data: response['CEOCar'],\n              backgroundColor: 'rgba(0, 0, 255, 0.2)',\n              borderColor: 'rgba(0,0,255,1)',\n              borderWidth: 1,\n              fill: false,\n            },\n            {\n              label: 'Marketing',\n              data: response['Marketing'],\n              backgroundColor: 'rgba(54, 500, 235, 0.2)',\n              borderColor: 'rgba(54, 500, 235, 1)',\n              borderWidth: 1,\n              fill: false,\n            },\n            {\n              label: 'Parking fines',\n              data: response['ParkingFines'],\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              borderColor: 'rgba(255,99,132,1)',\n              borderWidth: 1,\n              fill: false,\n            }\n          ]\n        };\n\n        this.lineOptions.title.text=`Monthly Account Balances of year ${this.year}`;\n        let ctx = this.chart;  \n\n        var myChart = new Chart(ctx, {\n          type: 'line',\n          data: this.lineData,\n          options: this.lineOptions,\n        });\n        if(!isInitialLoading) {\n          this.success = \"The chart was generated successfully\";\n          this.fail = null;\n        }\n      },err => {\n        this.success = null;\n        this.fail = \"Error occured wgile generating the chart\";\n      });\n  }\n\n}\n","import { inject } from 'aurelia-dependency-injection';\nimport { json } from 'aurelia-fetch-client';\nimport { TransactionService } from \"../../shared/services/transactionservice\";\nimport { SharedState } from '../../shared/state/sharedstate';\nimport { AccountService } from \"../../shared/services/accountservice\";\nimport moment from 'moment';\n\n@inject(TransactionService, AccountService, SharedState)\nexport class UpdateBalance {\n  transactions = [];\n  months = [\n    { id: 0, name: \"January\" },\n    { id: 1, name: \"February\" },\n    { id: 2, name: \"March\" },\n    { id: 3, name: \"April\" },\n    { id: 4, name: \"May\" },\n    { id: 5, name: \"June\" },\n    { id: 6, name: \"July\" },\n    { id: 7, name: \"August\" },\n    { id: 8, name: \"September\" },\n    { id: 9, name: \"October\" },\n    { id: 10, name: \"November\" },\n    { id: 11, name: \"December\" }\n  ]\n  excelData = [];\n\n  constructor(transactionService, accountService, sharedState) {\n    this.transactionService = transactionService;\n    this.accountService = accountService;\n    this.sharedState = sharedState;\n    this.success = false;\n    this.fail = false;\n    this.year = moment().year();\n    this.month = moment().month();\n  }\n\n  attached() {\n\n    if (this.sharedState.currentUser.role == 'ADMIN') {\n      this.getAllAccounts();\n      this.getAll(this.year, this.month);\n    }\n\n  }\n\n  getAllAccounts() {\n    this.accountService.getAllAccounts()\n      .then(response => {\n        this.accountList = response;\n      }, err => {\n        \n      });\n  }\n\n  getAllBtn(year, month) {\n    this.fail = null;\n    this.success = null;\n    this.getAll(year, month)\n  }\n\n  getAll(year, month) {\n\n    this.year = year;\n    this.month = month;\n    let params = {\n      year: year,\n      month: month\n    };\n\n    this.transactions = []\n\n    this.transactionService.getAll(params)\n      .then(response => {\n        if (response) {\n          this.transactions = response;\n\n          this.transactions.forEach(element => {\n            element.month = moment(month + 1, 'MM').format('MMMM');\n          });\n          this.monthString = moment(month + 1, 'MM').format('MMMM');\n          this.failLoading = null;\n        } else {\n          this.failLoading = 'Sorry, an error occured in loading the accouting balances.';\n        }\n\n      }, err => {\n        this.failLoading = 'Sorry, an error occured in loading the accouting balances.';\n      });\n\n\n  }\n\n  addTransaction() {\n    if (parseInt(this.newAmount) > 0) {\n      //if(1){\n      let transaction = {\n        Month: this.month,\n        Year: this.year,\n        Amount: parseInt(this.newAmount),\n        AccountId: this.selectedAccountId\n      }\n\n      let params = {\n        transaction: transaction\n      }\n\n      this.transactionService.save(params).then(response => {\n        this.success = \"The balance was added successfully\";\n        this.fail = null;\n        this.selectedAccountId = 1;\n        this.newAmount = null;\n        this.getAll(this.year, this.month)\n      }, err => {\n        this.success = null;\n        this.fail = \"The account balance failed saving.\";\n      });\n    }\n\n\n  }\n\n  deleteTransaction(transactionId) {\n    this.transactionService.destroy(transactionId)\n      .then(response => {\n        this.success = \"The balance was removed successfully\";\n        this.fail = null;\n        this.getAll(this.year, this.month)\n\n      }, err => {\n        this.success = null;\n        this.fail = \"The account balance failed removing.\";\n      })\n  }\n\n  upload(files) {\n    let disp = document.getElementById('fileDisplayArea');\n    this.convertTextToArray(disp.innerText);\n    let month = this.excelData[0][1] - 1;\n    let year = this.excelData[1][1];\n    let RandD = this.excelData[3][1];\n    let Canteen = this.excelData[4][1];\n    let CEOCar = this.excelData[5][1];\n    let Marketing = this.excelData[6][1];\n    let ParkingFines = this.excelData[7][1];\n\n    let postDate = {\n      month,\n      year,\n      RandD,\n      Canteen,\n      CEOCar,\n      Marketing,\n      ParkingFines\n    }\n\n    this.transactionService.saveExcelBalanceData(postDate)\n      .then(data => {\n        this.success = 'The account balances were updated successfully.';\n        this.fail = null;\n        this.getAll(year, month);\n        let disp = document.getElementById('fileDisplayArea');\n        disp.innerText = \"\";\n        this.fileLocation = [];\n      }, err => {\n        this.success = null;\n        this.fail = 'The account failed uploading.';\n      });\n\n\n  }\n\n  getAsText(files) {\n    let disp = document.getElementById('fileDisplayArea');\n    disp.innerText = '';\n    if (window.FileReader) {\n      let reader = new FileReader();\n      reader.onload = function (e) {\n        disp.innerText = reader.result;\n      }\n      reader.readAsText(files[0]);\n    } else {\n      alert('FileReader are not supported in this browser.');\n    }\n  }\n\n  convertTextToArray(text) {\n    let allTextLines = text.split(/\\r\\n|\\n/);\n    let lines = [];\n    for (let i = 0; i < allTextLines.length; i++) {\n      let data = allTextLines[i].split(',');\n      let tarr = [];\n      for (let j = 0; j < data.length; j++) {\n        tarr.push(data[j]);\n      }\n      lines.push(tarr);\n    }\n    this.excelData = lines;\n  }\n\n}\n","export class FooterLayout {}\r\n","import {inject} from 'aurelia-dependency-injection';\nimport {bindable, bindingMode} from 'aurelia-framework';\nimport {Router, activationStrategy} from 'aurelia-router';\nimport {SharedState} from '../state/sharedstate';\nimport {JwtService} from '../services/jwtservice';\nimport {UserService} from '../services/userservice';\n\n@inject(UserService,SharedState, JwtService, Router)\nexport class HeaderLayout {\n  activeRoute = '';\n  @bindable({defaultBindingMode: bindingMode.twoWay}) routerConfig;\n  \n  constructor(userService, sharedState,jwtService, router) {\n    this.router = router;\n    this.sharedState = sharedState;\n    this.jwtService = jwtService;\n    this.userService = userService;\n  }\n  \n  routerConfigChanged(newValue, oldValue) {\n    this.activeRoute = newValue.name;\n  }\n\n  logout(){\n    this.userService.purgeAuth();\n    this.router.navigateToRoute('home');\n  }\n}\n","export class User {\n  \n  constructor() {\n    this.email = '';\n    this.token = '';\n    this.username = '';\n    this.bio = '';\n    this.image = '';\n    this.role = '';\n  }\n  \n}\n","import {inject} from 'aurelia-dependency-injection';\nimport {ApiService} from './apiservice';\n\n@inject(ApiService)\nexport class AccountService {\n\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  \n  getBalance(params) {\n    return this.apiService.get('/api/Balance',params)\n  }\n\n  getAllAccounts(){\n    return this.apiService.get('/api/BusinessAccounts/')\n  }\n  \n\n}\n","import {config} from './config';\nimport {HttpClient, json} from 'aurelia-fetch-client';\nimport {inject} from 'aurelia-dependency-injection';\nimport * as qs from 'querystringify';\nimport {JwtService} from './jwtservice';\nimport {status, parseError} from './servicehelper';\n\n@inject(HttpClient, JwtService)\nexport class ApiService {\n  \n  constructor(http, jwtService) {\n    this.http = http;\n    this.jwtService = jwtService;\n  }\n  \n  setHeaders() {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      //'Content-Type':'application/x-www-form-urlencoded',\n      'Accept': 'application/json',\n      //'Access-Control-Allow-Headers': '*',\n      //'Access-Control-Allow-Origin': '*'\n    };\n    if (this.jwtService.getToken()) {\n      headersConfig['Authorization'] = `Bearer ${this.jwtService.getToken()}`;\n    }\n    return new Headers(headersConfig);\n  }\n\n  get(path, params) {\n    const options = {\n      method: 'GET',\n      headers: this.setHeaders()\n    };\n    return this.http.fetch(`${config.api_url}${path}?${qs.stringify(params)}`,options)\n      .then(status)\n      .catch(parseError)\n  }\n \n  put(path, body = {}) {\n    const options = {\n      method: 'PUT',\n      headers: this.setHeaders(),\n      body: json(body)\n    };\n    return this.http.fetch(`${config.api_url}${path}`,options)\n      .then(status)\n      .catch(parseError)\n  }\n  \n  post(path, body = {}) {\n    const options = {\n      method: 'POST',\n      headers: this.setHeaders(),\n      //mode: \"no-cors\",\n      body: json(body)\n    };\n    return this.http.fetch(`${config.api_url}${path}`,options)\n      .then(status)\n      .catch(parseError)\n  }\n\n  postForLogin(path, body = {}) {\n    return this.http.fetch(config.api_url+'/token', {\n      method: 'POST',\n      contentType: 'application/x-www-form-urlencoded',\n      //crossDomain: true,\n      //mode: 'cors',\n      body: 'grant_type=password&userName='+body.username+'&password='+body.password\n    })\n      .then(data => {\n        data = data.json()\n        return data;\n      },err => {\n        return err;\n      });\n\n  }\n  \n  delete(path) {\n    const options = {\n      method: 'DELETE',\n      headers: this.setHeaders()\n    };\n    return this.http.fetch(`${config.api_url}${path}`,options)\n      .then(status)\n      .catch(parseError)\n  }\n}\n","import {inject} from 'aurelia-dependency-injection';\r\nimport {ApiService} from './apiservice';\r\n\r\n@inject(ApiService)\r\nexport class ArticleService {\r\n\r\n  constructor(apiService) {\r\n    this.apiService = apiService;\r\n  }\r\n  \r\n  getList(type, params) {\r\n    return this.apiService.get('/articles' + ((type === 'feed') ? '/feed' : ''), params)\r\n  }\r\n  \r\n  get(slug) {\r\n    return this.apiService.get('/articles/' + slug)\r\n      .then(data => data.article)\r\n  }\r\n  \r\n  destroy(slug) {\r\n    return this.apiService.delete('/articles/' + slug)\r\n  }\r\n  \r\n  save(article) {\r\n    if (article.slug) {\r\n      // If we're updating an existing article\r\n      return this.apiService.put('/articles/' + article.slug, {article: article})\r\n        .then(data => data.article)\r\n    } else {\r\n      // Otherwise, create a new article\r\n      return this.apiService.post('/articles/', {article: article})\r\n        .then(data => data.article)\r\n    }\r\n  }\r\n  \r\n  favorite(slug) {\r\n    return this.apiService.post('/articles/' + slug + '/favorite')\r\n  }\r\n  \r\n  unfavorite(slug) {\r\n    return this.apiService.delete('/articles/' + slug + '/favorite')\r\n  }\r\n  \r\n}\r\n","export const config = {\n  api_url: 'https://abvwebapi.azurewebsites.net'\n  //api_url: 'http://localhost:53046'\n}\n","export class JwtService {\r\n  \r\n  getToken() {\r\n    return window.localStorage['jwtToken'];\r\n  }\r\n  \r\n  saveToken(token) {\r\n    window.localStorage['jwtToken'] = token;\r\n  }\r\n  \r\n  destroyToken() {\r\n    window.localStorage.removeItem('jwtToken');\r\n  }\r\n  \r\n}\r\n","import {inject} from 'aurelia-dependency-injection';\nimport {ApiService} from './apiservice';\n\n@inject(ApiService)\nexport class ReportService {\n\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  \n  getReport(params) {\n    return this.apiService.get('/api/Report', params)\n  }\n}\n","export function status(response) {\n  if (response.status >= 200 && response.status < 400) {\n    return response.json();\n  }\n  \n  throw response;\n}\n\nexport function parseError(error) {\n  if (!(error instanceof Error))\n    return new Promise((resolve, reject) => reject(error))\n}\n","import {inject} from 'aurelia-dependency-injection';\nimport {ApiService} from './apiservice';\n\n@inject(ApiService)\nexport class TransactionService {\n\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n\n  getAll(params) { //year and month\n    return this.apiService.get('/api/Transactions', params);\n  }\n  \n\n  get(slug) {\n    return this.apiService.get('/api/transactions/' + slug)\n      .then(data => data.transaction)\n  }\n  \n  destroy(slug) {\n    return this.apiService.delete('/api/transactions/' + slug)\n  }\n  \n  save(transaction) {\n    if (transaction.slug) {\n      // If we're updating an existing transaction\n      return this.apiService.put('/api/transactions/' + transaction.slug, {transaction: transaction})\n        .then(data => data.transaction)\n    } else {\n      // Otherwise, create a new transaction\n      return this.apiService.post('/api/transactions/', transaction.transaction)\n    }\n  }\n  \n  saveExcelBalanceData(excelData) {\n    return this.apiService.post('/api/transactions/excelData', excelData)\n        .then(data => data.transaction)\n  }\n  \n}\n","import { inject } from 'aurelia-dependency-injection';\nimport { ApiService } from './apiservice';\nimport { JwtService } from './jwtservice';\nimport { User } from '../models/user';\nimport { SharedState } from '../state/sharedstate';\nimport {Router, activationStrategy} from 'aurelia-router';\n\n@inject(ApiService, JwtService, SharedState,Router)\nexport class UserService {\n\n  constructor(apiService, jwtService, sharedState, router) {\n    this.apiService = apiService;\n    this.jwtService = jwtService;\n    this.sharedState = sharedState;\n  }\n\n  // Verify JWT in localstorage with server & load user's info.\n  // This runs once on application startup.\n  populate() {\n    if (this.jwtService.getToken()) {\n      this.apiService.get('/token')\n        .then(data => {\n          this.setAuth(data)\n          return data;\n        },err => {\n          return \"Error occured.\";\n        })\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n\n  setAuth(user) {\n    // Save JWT sent from server in localstorage\n    this.jwtService.saveToken(user.access_token);\n    this.sharedState.currentUser = user;\n    this.sharedState.isAuthenticated = true;\n  }\n\n  purgeAuth() {\n    // Remove JWT from localstorage\n    this.jwtService.destroyToken();\n    this.sharedState.currentUser = new User();\n    this.sharedState.isAuthenticated = false;\n  }\n\n  attemptAuth(credentials) {\n    this.purgeAuth();\n\n    return this.apiService.postForLogin('/token', credentials)\n      .then(user => {\n        if (user.access_token) {\n          this.setAuth(user);\n          return this.getUserInfo()\n            .then(info => {\n              if (info.Role) {\n                user.role = info.Role\n                this.setAuth(user);\n                location.assign('/#/home');\n                return \"User logged in successfully.\";\n              } else {\n                this.purgeAuth();\n                return \"User login failed.\";\n                \n              }\n            },err => {\n              this.purgeAuth();\n              return \"User login failed.\";\n            });\n        } else {\n          this.purgeAuth();\n          return \"User login failed.\";\n        }\n\n      },err => {\n        this.purgeAuth();\n        return \"User login failed.\";\n      });\n  }\n\n  getUserInfo() {\n    return this.apiService.get('/api/Account/UserInfo')\n      .then(info => {\n        return info;\n      }, err => {\n        return \"User reterival failed.\";\n      });\n  }\n\n  register(credentials) {\n    return this.apiService.post('/api/Account/Register', credentials)\n      .then(data => {\n        return \"User registration was successful.\";\n      }, err => {\n        return \"User registration failed.\";\n      });\n\n  }\n\n  addRole(role) {\n    return this.apiService.post('/api/Account/AssignRole', role)\n      .then(data => {\n        return \"User role was added successful.\";\n      },err=> {\n        return \"User role addtion failed.\";\n      });\n  }\n\n\n}\n","import {User} from '../models/user';\r\n\r\nexport class SharedState {\r\n  \r\n  constructor() {\r\n    this.currentUser = new User();\r\n    this.isAuthenticated = false;\r\n  }\r\n}\r\n","import {bindable} from 'aurelia-framework';\r\n\r\nexport class AccountList {\r\n  @bindable accounts;\r\n}\r\n\r\n","import {bindable} from 'aurelia-framework';\r\n\r\nexport class AccountPreview {\r\n  @bindable account;\r\n  \r\n}\r\n","import moment from 'moment';\r\n\r\nexport class DateValueConverter {\r\n  /*\r\n  * \"2017-07-27T07:01:19.644Z\"\r\n  * into\r\n  * \"July 27, 2017\"\r\n  */\r\n  toView(value) {\r\n    return moment(value).format('MMMM D, YYYY')\r\n  }\r\n}\r\n\r\n","export class FormatHtmlValueConverter {\r\n  toView(value) {\r\n    return value.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\r\n  }\r\n}\r\n\r\n","export class KeysValueConverter {\r\n  \r\n  toView(value) {\r\n    if (value)\r\n      return Reflect.ownKeys(value);\r\n  }\r\n  \r\n}\r\n"],"sourceRoot":".."}